{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"accessible\", \"accessibilityLabel\", \"accessibilityState\", \"allowFontScaling\", \"aria-busy\", \"aria-checked\", \"aria-disabled\", \"aria-expanded\", \"aria-label\", \"aria-selected\", \"ellipsizeMode\", \"id\", \"nativeID\", \"onLongPress\", \"onPress\", \"onPressIn\", \"onPressOut\", \"onResponderGrant\", \"onResponderMove\", \"onResponderRelease\", \"onResponderTerminate\", \"onResponderTerminationRequest\", \"onStartShouldSetResponder\", \"pressRetentionOffset\", \"suppressHighlighting\"];\nvar _jsxFileName = \"C:\\\\dev_serratec\\\\ReactNative\\\\ReactNativeSerratec\\\\individual-p1\\\\node_modules\\\\react-native\\\\Libraries\\\\Text\\\\Text.js\";\nimport * as PressabilityDebug from '../Pressability/PressabilityDebug';\nimport usePressability from '../Pressability/usePressability';\nimport flattenStyle from '../StyleSheet/flattenStyle';\nimport processColor from '../StyleSheet/processColor';\nimport Platform from '../Utilities/Platform';\nimport TextAncestor from './TextAncestor';\nimport { NativeText, NativeVirtualText } from './TextNativeComponent';\nimport * as React from 'react';\nimport { useContext, useMemo, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Text = React.forwardRef((props, forwardedRef) => {\n  const {\n      accessible,\n      accessibilityLabel,\n      accessibilityState,\n      allowFontScaling,\n      'aria-busy': ariaBusy,\n      'aria-checked': ariaChecked,\n      'aria-disabled': ariaDisabled,\n      'aria-expanded': ariaExpanded,\n      'aria-label': ariaLabel,\n      'aria-selected': ariaSelected,\n      ellipsizeMode,\n      id,\n      nativeID,\n      onLongPress,\n      onPress,\n      onPressIn,\n      onPressOut,\n      onResponderGrant,\n      onResponderMove,\n      onResponderRelease,\n      onResponderTerminate,\n      onResponderTerminationRequest,\n      onStartShouldSetResponder,\n      pressRetentionOffset,\n      suppressHighlighting\n    } = props,\n    restProps = _objectWithoutPropertiesLoose(props, _excluded);\n  const [isHighlighted, setHighlighted] = useState(false);\n  let _accessibilityState;\n  if (accessibilityState != null || ariaBusy != null || ariaChecked != null || ariaDisabled != null || ariaExpanded != null || ariaSelected != null) {\n    _accessibilityState = {\n      busy: ariaBusy ?? accessibilityState?.busy,\n      checked: ariaChecked ?? accessibilityState?.checked,\n      disabled: ariaDisabled ?? accessibilityState?.disabled,\n      expanded: ariaExpanded ?? accessibilityState?.expanded,\n      selected: ariaSelected ?? accessibilityState?.selected\n    };\n  }\n  const _disabled = restProps.disabled != null ? restProps.disabled : _accessibilityState?.disabled;\n  const nativeTextAccessibilityState = _disabled !== _accessibilityState?.disabled ? Object.assign({}, _accessibilityState, {\n    disabled: _disabled\n  }) : _accessibilityState;\n  const isPressable = (onPress != null || onLongPress != null || onStartShouldSetResponder != null) && _disabled !== true;\n  const initialized = useLazyInitialization(isPressable);\n  const config = useMemo(() => initialized ? {\n    disabled: !isPressable,\n    pressRectOffset: pressRetentionOffset,\n    onLongPress,\n    onPress,\n    onPressIn(event) {\n      setHighlighted((suppressHighlighting == null || !suppressHighlighting) && Platform.OS === 'ios');\n      onPressIn?.(event);\n    },\n    onPressOut(event) {\n      setHighlighted(false);\n      onPressOut?.(event);\n    },\n    onResponderTerminationRequest_DEPRECATED: onResponderTerminationRequest,\n    onStartShouldSetResponder_DEPRECATED: onStartShouldSetResponder\n  } : null, [initialized, isPressable, pressRetentionOffset, onLongPress, onPress, onPressIn, onPressOut, onResponderTerminationRequest, onStartShouldSetResponder, suppressHighlighting]);\n  const eventHandlers = usePressability(config);\n  const eventHandlersForText = useMemo(() => eventHandlers == null ? null : {\n    onResponderGrant(event) {\n      eventHandlers.onResponderGrant(event);\n      if (onResponderGrant != null) {\n        onResponderGrant(event);\n      }\n    },\n    onResponderMove(event) {\n      eventHandlers.onResponderMove(event);\n      if (onResponderMove != null) {\n        onResponderMove(event);\n      }\n    },\n    onResponderRelease(event) {\n      eventHandlers.onResponderRelease(event);\n      if (onResponderRelease != null) {\n        onResponderRelease(event);\n      }\n    },\n    onResponderTerminate(event) {\n      eventHandlers.onResponderTerminate(event);\n      if (onResponderTerminate != null) {\n        onResponderTerminate(event);\n      }\n    },\n    onClick: eventHandlers.onClick,\n    onResponderTerminationRequest: eventHandlers.onResponderTerminationRequest,\n    onStartShouldSetResponder: eventHandlers.onStartShouldSetResponder\n  }, [eventHandlers, onResponderGrant, onResponderMove, onResponderRelease, onResponderTerminate]);\n  const selectionColor = restProps.selectionColor == null ? null : processColor(restProps.selectionColor);\n  let style = restProps.style;\n  if (__DEV__) {\n    if (PressabilityDebug.isEnabled() && onPress != null) {\n      style = [restProps.style, {\n        color: 'magenta'\n      }];\n    }\n  }\n  let numberOfLines = restProps.numberOfLines;\n  if (numberOfLines != null && !(numberOfLines >= 0)) {\n    console.error(`'numberOfLines' in <Text> must be a non-negative number, received: ${numberOfLines}. The value will be set to 0.`);\n    numberOfLines = 0;\n  }\n  const hasTextAncestor = useContext(TextAncestor);\n  const _accessible = Platform.select({\n    ios: accessible !== false,\n    default: accessible\n  });\n  style = flattenStyle(style);\n  if (typeof style?.fontWeight === 'number') {\n    style.fontWeight = style?.fontWeight.toString();\n  }\n  let _selectable = restProps.selectable;\n  if (style?.userSelect != null) {\n    _selectable = userSelectToSelectableMap[style.userSelect];\n    delete style.userSelect;\n  }\n  if (style?.verticalAlign != null) {\n    style.textAlignVertical = verticalAlignToTextAlignVerticalMap[style.verticalAlign];\n    delete style.verticalAlign;\n  }\n  const _hasOnPressOrOnLongPress = props.onPress != null || props.onLongPress != null;\n  return hasTextAncestor ? _jsxDEV(NativeVirtualText, Object.assign({}, restProps, eventHandlersForText, {\n    accessibilityLabel: ariaLabel ?? accessibilityLabel,\n    accessibilityState: _accessibilityState,\n    isHighlighted: isHighlighted,\n    isPressable: isPressable,\n    nativeID: id ?? nativeID,\n    numberOfLines: numberOfLines,\n    ref: forwardedRef,\n    selectable: _selectable,\n    selectionColor: selectionColor,\n    style: style\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 5\n  }, this) : _jsxDEV(TextAncestor.Provider, {\n    value: true,\n    children: _jsxDEV(NativeText, Object.assign({}, restProps, eventHandlersForText, {\n      accessibilityLabel: ariaLabel ?? accessibilityLabel,\n      accessibilityState: nativeTextAccessibilityState,\n      accessible: accessible == null && Platform.OS === 'android' ? _hasOnPressOrOnLongPress : _accessible,\n      allowFontScaling: allowFontScaling !== false,\n      disabled: _disabled,\n      ellipsizeMode: ellipsizeMode ?? 'tail',\n      isHighlighted: isHighlighted,\n      nativeID: id ?? nativeID,\n      numberOfLines: numberOfLines,\n      ref: forwardedRef,\n      selectable: _selectable,\n      selectionColor: selectionColor,\n      style: style\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 5\n  }, this);\n});\nText.displayName = 'Text';\nfunction useLazyInitialization(newValue) {\n  const [oldValue, setValue] = useState(newValue);\n  if (!oldValue && newValue) {\n    setValue(newValue);\n  }\n  return oldValue;\n}\nconst userSelectToSelectableMap = {\n  auto: true,\n  text: true,\n  none: false,\n  contain: true,\n  all: true\n};\nconst verticalAlignToTextAlignVerticalMap = {\n  auto: 'auto',\n  top: 'top',\n  bottom: 'bottom',\n  middle: 'center'\n};\nmodule.exports = Text;","map":{"version":3,"names":["PressabilityDebug","usePressability","flattenStyle","processColor","Platform","TextAncestor","NativeText","NativeVirtualText","React","useContext","useMemo","useState","jsxDEV","_jsxDEV","Text","forwardRef","props","forwardedRef","accessible","accessibilityLabel","accessibilityState","allowFontScaling","ariaBusy","ariaChecked","ariaDisabled","ariaExpanded","ariaLabel","ariaSelected","ellipsizeMode","id","nativeID","onLongPress","onPress","onPressIn","onPressOut","onResponderGrant","onResponderMove","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","onStartShouldSetResponder","pressRetentionOffset","suppressHighlighting","restProps","_objectWithoutPropertiesLoose","_excluded","isHighlighted","setHighlighted","_accessibilityState","busy","checked","disabled","expanded","selected","_disabled","nativeTextAccessibilityState","Object","assign","isPressable","initialized","useLazyInitialization","config","pressRectOffset","event","OS","onResponderTerminationRequest_DEPRECATED","onStartShouldSetResponder_DEPRECATED","eventHandlers","eventHandlersForText","onClick","selectionColor","style","__DEV__","isEnabled","color","numberOfLines","console","error","hasTextAncestor","_accessible","select","ios","default","fontWeight","toString","_selectable","selectable","userSelect","userSelectToSelectableMap","verticalAlign","textAlignVertical","verticalAlignToTextAlignVerticalMap","_hasOnPressOrOnLongPress","ref","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","children","displayName","newValue","oldValue","setValue","auto","text","none","contain","all","top","bottom","middle","module","exports"],"sources":["C:/dev_serratec/ReactNative/ReactNativeSerratec/individual-p1/node_modules/react-native/Libraries/Text/Text.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {PressEvent} from '../Types/CoreEventTypes';\nimport type {TextProps} from './TextProps';\n\nimport * as PressabilityDebug from '../Pressability/PressabilityDebug';\nimport usePressability from '../Pressability/usePressability';\nimport flattenStyle from '../StyleSheet/flattenStyle';\nimport processColor from '../StyleSheet/processColor';\nimport Platform from '../Utilities/Platform';\nimport TextAncestor from './TextAncestor';\nimport {NativeText, NativeVirtualText} from './TextNativeComponent';\nimport * as React from 'react';\nimport {useContext, useMemo, useState} from 'react';\n\n/**\n * Text is the fundamental component for displaying text.\n *\n * @see https://reactnative.dev/docs/text\n */\nconst Text: React.AbstractComponent<\n  TextProps,\n  React.ElementRef<typeof NativeText | typeof NativeVirtualText>,\n> = React.forwardRef((props: TextProps, forwardedRef) => {\n  const {\n    accessible,\n    accessibilityLabel,\n    accessibilityState,\n    allowFontScaling,\n    'aria-busy': ariaBusy,\n    'aria-checked': ariaChecked,\n    'aria-disabled': ariaDisabled,\n    'aria-expanded': ariaExpanded,\n    'aria-label': ariaLabel,\n    'aria-selected': ariaSelected,\n    ellipsizeMode,\n    id,\n    nativeID,\n    onLongPress,\n    onPress,\n    onPressIn,\n    onPressOut,\n    onResponderGrant,\n    onResponderMove,\n    onResponderRelease,\n    onResponderTerminate,\n    onResponderTerminationRequest,\n    onStartShouldSetResponder,\n    pressRetentionOffset,\n    suppressHighlighting,\n    ...restProps\n  } = props;\n\n  const [isHighlighted, setHighlighted] = useState(false);\n\n  let _accessibilityState;\n  if (\n    accessibilityState != null ||\n    ariaBusy != null ||\n    ariaChecked != null ||\n    ariaDisabled != null ||\n    ariaExpanded != null ||\n    ariaSelected != null\n  ) {\n    _accessibilityState = {\n      busy: ariaBusy ?? accessibilityState?.busy,\n      checked: ariaChecked ?? accessibilityState?.checked,\n      disabled: ariaDisabled ?? accessibilityState?.disabled,\n      expanded: ariaExpanded ?? accessibilityState?.expanded,\n      selected: ariaSelected ?? accessibilityState?.selected,\n    };\n  }\n\n  const _disabled =\n    restProps.disabled != null\n      ? restProps.disabled\n      : _accessibilityState?.disabled;\n\n  const nativeTextAccessibilityState =\n    _disabled !== _accessibilityState?.disabled\n      ? {..._accessibilityState, disabled: _disabled}\n      : _accessibilityState;\n\n  const isPressable =\n    (onPress != null ||\n      onLongPress != null ||\n      onStartShouldSetResponder != null) &&\n    _disabled !== true;\n\n  const initialized = useLazyInitialization(isPressable);\n  const config = useMemo(\n    () =>\n      initialized\n        ? {\n            disabled: !isPressable,\n            pressRectOffset: pressRetentionOffset,\n            onLongPress,\n            onPress,\n            onPressIn(event: PressEvent) {\n              // Updating isHighlighted causes unnecessary re-renders for platforms that don't use it\n              // in the best case, and cause issues with text selection in the worst case. Forcing\n              // the isHighlighted prop to false on all platforms except iOS.\n              setHighlighted(\n                (suppressHighlighting == null || !suppressHighlighting) &&\n                  Platform.OS === 'ios',\n              );\n              onPressIn?.(event);\n            },\n            onPressOut(event: PressEvent) {\n              setHighlighted(false);\n              onPressOut?.(event);\n            },\n            onResponderTerminationRequest_DEPRECATED:\n              onResponderTerminationRequest,\n            onStartShouldSetResponder_DEPRECATED: onStartShouldSetResponder,\n          }\n        : null,\n    [\n      initialized,\n      isPressable,\n      pressRetentionOffset,\n      onLongPress,\n      onPress,\n      onPressIn,\n      onPressOut,\n      onResponderTerminationRequest,\n      onStartShouldSetResponder,\n      suppressHighlighting,\n    ],\n  );\n\n  const eventHandlers = usePressability(config);\n  const eventHandlersForText = useMemo(\n    () =>\n      eventHandlers == null\n        ? null\n        : {\n            onResponderGrant(event: PressEvent) {\n              eventHandlers.onResponderGrant(event);\n              if (onResponderGrant != null) {\n                onResponderGrant(event);\n              }\n            },\n            onResponderMove(event: PressEvent) {\n              eventHandlers.onResponderMove(event);\n              if (onResponderMove != null) {\n                onResponderMove(event);\n              }\n            },\n            onResponderRelease(event: PressEvent) {\n              eventHandlers.onResponderRelease(event);\n              if (onResponderRelease != null) {\n                onResponderRelease(event);\n              }\n            },\n            onResponderTerminate(event: PressEvent) {\n              eventHandlers.onResponderTerminate(event);\n              if (onResponderTerminate != null) {\n                onResponderTerminate(event);\n              }\n            },\n            onClick: eventHandlers.onClick,\n            onResponderTerminationRequest:\n              eventHandlers.onResponderTerminationRequest,\n            onStartShouldSetResponder: eventHandlers.onStartShouldSetResponder,\n          },\n    [\n      eventHandlers,\n      onResponderGrant,\n      onResponderMove,\n      onResponderRelease,\n      onResponderTerminate,\n    ],\n  );\n\n  // TODO: Move this processing to the view configuration.\n  const selectionColor =\n    restProps.selectionColor == null\n      ? null\n      : processColor(restProps.selectionColor);\n\n  let style = restProps.style;\n\n  if (__DEV__) {\n    if (PressabilityDebug.isEnabled() && onPress != null) {\n      style = [restProps.style, {color: 'magenta'}];\n    }\n  }\n\n  let numberOfLines = restProps.numberOfLines;\n  if (numberOfLines != null && !(numberOfLines >= 0)) {\n    console.error(\n      `'numberOfLines' in <Text> must be a non-negative number, received: ${numberOfLines}. The value will be set to 0.`,\n    );\n    numberOfLines = 0;\n  }\n\n  const hasTextAncestor = useContext(TextAncestor);\n\n  const _accessible = Platform.select({\n    ios: accessible !== false,\n    default: accessible,\n  });\n\n  // $FlowFixMe[underconstrained-implicit-instantiation]\n  style = flattenStyle(style);\n\n  if (typeof style?.fontWeight === 'number') {\n    // $FlowFixMe[prop-missing]\n    // $FlowFixMe[cannot-write]\n    style.fontWeight = style?.fontWeight.toString();\n  }\n\n  let _selectable = restProps.selectable;\n  if (style?.userSelect != null) {\n    // $FlowFixMe[invalid-computed-prop]\n    _selectable = userSelectToSelectableMap[style.userSelect];\n    // $FlowFixMe[prop-missing]\n    // $FlowFixMe[cannot-write]\n    delete style.userSelect;\n  }\n\n  if (style?.verticalAlign != null) {\n    // $FlowFixMe[prop-missing]\n    // $FlowFixMe[cannot-write]\n    style.textAlignVertical =\n      // $FlowFixMe[invalid-computed-prop]\n      verticalAlignToTextAlignVerticalMap[style.verticalAlign];\n    // $FlowFixMe[prop-missing]\n    // $FlowFixMe[cannot-write]\n    delete style.verticalAlign;\n  }\n\n  const _hasOnPressOrOnLongPress =\n    props.onPress != null || props.onLongPress != null;\n\n  return hasTextAncestor ? (\n    <NativeVirtualText\n      {...restProps}\n      {...eventHandlersForText}\n      accessibilityLabel={ariaLabel ?? accessibilityLabel}\n      accessibilityState={_accessibilityState}\n      isHighlighted={isHighlighted}\n      isPressable={isPressable}\n      nativeID={id ?? nativeID}\n      numberOfLines={numberOfLines}\n      ref={forwardedRef}\n      selectable={_selectable}\n      selectionColor={selectionColor}\n      style={style}\n    />\n  ) : (\n    <TextAncestor.Provider value={true}>\n      <NativeText\n        {...restProps}\n        {...eventHandlersForText}\n        accessibilityLabel={ariaLabel ?? accessibilityLabel}\n        accessibilityState={nativeTextAccessibilityState}\n        accessible={\n          accessible == null && Platform.OS === 'android'\n            ? _hasOnPressOrOnLongPress\n            : _accessible\n        }\n        allowFontScaling={allowFontScaling !== false}\n        disabled={_disabled}\n        ellipsizeMode={ellipsizeMode ?? 'tail'}\n        isHighlighted={isHighlighted}\n        nativeID={id ?? nativeID}\n        numberOfLines={numberOfLines}\n        ref={forwardedRef}\n        selectable={_selectable}\n        selectionColor={selectionColor}\n        style={style}\n      />\n    </TextAncestor.Provider>\n  );\n});\n\nText.displayName = 'Text';\n\n/**\n * Returns false until the first time `newValue` is true, after which this will\n * always return true. This is necessary to lazily initialize `Pressability` so\n * we do not eagerly create one for every pressable `Text` component.\n */\nfunction useLazyInitialization(newValue: boolean): boolean {\n  const [oldValue, setValue] = useState(newValue);\n  if (!oldValue && newValue) {\n    setValue(newValue);\n  }\n  return oldValue;\n}\n\nconst userSelectToSelectableMap = {\n  auto: true,\n  text: true,\n  none: false,\n  contain: true,\n  all: true,\n};\n\nconst verticalAlignToTextAlignVerticalMap = {\n  auto: 'auto',\n  top: 'top',\n  bottom: 'bottom',\n  middle: 'center',\n};\n\nmodule.exports = Text;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}